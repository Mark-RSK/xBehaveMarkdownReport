//-------------------------------------------------------------------------------
// <copyright file="Convertion.cs" company="Appccelerate">
//   Copyright (c) 2008-2015
//
//   Licensed under the Apache License, Version 2.0 (the "License");
//   you may not use this file except in compliance with the License.
//   You may obtain a copy of the License at
//
//       http://www.apache.org/licenses/LICENSE-2.0
//
//   Unless required by applicable law or agreed to in writing, software
//   distributed under the License is distributed on an "AS IS" BASIS,
//   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
//   See the License for the specific language governing permissions and
//   limitations under the License.
// </copyright>
//-------------------------------------------------------------------------------

namespace XBehaveMarkdownReport.Specs
{
    using System.Xml.Linq;

    using ApprovalTests;

    using Xunit;

    public class Convertion
    {
        [Fact]
        public void Converts()
        {
            Converter converter = new Converter();
                
            string result = converter.Convert(Input);
                
            Approvals.Verify(result);
        }

        private static readonly XDocument Input = XDocument.Parse(
            @"<?xml version=""1.0"" encoding=""utf-8""?>
<assemblies>
  <assembly name=""C:\projects\appccelerate\repos\statemachine\source\Appccelerate.StateMachine.Specs\bin\Debug\Appccelerate.StateMachine.Specs.DLL"" environment=""64-bit .NET 4.0.30319.42000 [collection-per-class, parallel]"" test-framework=""xUnit.net 2.0.0.2929"" run-date=""2015-07-28"" run-time=""08:49:08"" config-file=""C:\Temp\xunit\xunit.runner.console.2.0.0\tools\xunit.console.exe.Config"" total=""184"" passed=""184"" failed=""0"" skipped=""0"" time=""0.758"" errors=""0"">
    <errors />
    <collection total=""10"" passed=""10"" failed=""0"" skipped=""0"" name=""collection"" time=""0.010"">
      <test name=""Appccelerate.StateMachine.HierarchicalStateMachineInitialization.InitializationInSuperState() [01] (Background) establish a hierarchical state machine"" type=""Appccelerate.StateMachine.HierarchicalStateMachine.Initialization"" method=""InitializationInSuperState"" time=""0.0044557"" result=""Pass"" />
      <test name=""Appccelerate.StateMachine.HierarchicalStateMachineInitialization.InitializationInSuperState() [02] when initializing to a super state and starting the state machine"" type=""Appccelerate.StateMachine.HierarchicalStateMachine.Initialization"" method=""InitializationInSuperState"" time=""0.0005243"" result=""Pass"" />
      <test name=""Appccelerate.StateMachine.HierarchicalStateMachineInitialization.InitializationInSuperState() [03] it should set current state of state machine to initial leaf state of the state to which it is initialized"" type=""Appccelerate.StateMachine.HierarchicalStateMachine.Initialization"" method=""InitializationInSuperState"" time=""0.0002037"" result=""Pass"" />
      <test name=""Appccelerate.StateMachine.HierarchicalStateMachineInitialization.InitializationInSuperState() [04] it should execute entry action of super state to which state machine is initialized"" type=""Appccelerate.StateMachine.HierarchicalStateMachine.Initialization"" method=""InitializationInSuperState"" time=""0.0023644"" result=""Pass"" />
      <test name=""Appccelerate.StateMachine.HierarchicalStateMachineInitialization.InitializationInSuperState() [05] it should execute entry actions of initial sub states until a leaf state is reached"" type=""Appccelerate.StateMachine.HierarchicalStateMachine.Initialization"" method=""InitializationInSuperState"" time=""0.0001747"" result=""Pass"" />
      <test name=""Appccelerate.StateMachine.HierarchicalStateMachineInitialization.InitializationInLeafState() [01] (Background) establish a hierarchical state machine"" type=""Appccelerate.StateMachine.HierarchicalStateMachine.Initialization"" method=""InitializationInLeafState"" time=""0.0000467"" result=""Pass"" />
      <test name=""Appccelerate.StateMachine.HierarchicalStateMachineInitialization.InitializationInLeafState() [02] when initializing to a leaf state and starting the state machine"" type=""Appccelerate.StateMachine.HierarchicalStateMachine.Initialization"" method=""InitializationInLeafState"" time=""0.0001165"" result=""Pass"" />
      <test name=""Appccelerate.StateMachine.HierarchicalStateMachineInitialization.InitializationInLeafState() [03] it should set current state of state machine to state to which it is initialized"" type=""Appccelerate.StateMachine.HierarchicalStateMachine.Initialization"" method=""InitializationInLeafState"" time=""0.0001726"" result=""Pass"" />
      <test name=""Appccelerate.StateMachine.HierarchicalStateMachineInitialization.InitializationInLeafState() [04] it should execute entry action of state to which state machine is initialized"" type=""Appccelerate.StateMachine.HierarchicalStateMachine.Initialization"" method=""InitializationInLeafState"" time=""0.000166"" result=""Pass"" />
      <test name=""Appccelerate.StateMachine.HierarchicalStateMachineInitialization.InitializationInLeafState() [05] it should execute entry action of super states of the state to which state machine is initialized"" type=""Appccelerate.StateMachine.HierarchicalStateMachine.Initialization"" method=""InitializationInLeafState"" time=""0.0001892"" result=""Pass"" />
    </collection>
    <collection total=""16"" passed=""16"" failed=""0"" skipped=""0"" name=""Test collection for Appccelerate.StateMachine.Initialization"" time=""0.591"">
      <test name=""Appccelerate.StateMachine.Initialization.Reinitialization() [01] establish an initialized state machine"" type=""Appccelerate.StateMachine.Initialization"" method=""Reinitialization"" time=""0.0515361"" result=""Pass"" />
      <test name=""Appccelerate.StateMachine.Initialization.Reinitialization() [02] when state machine is initialized again"" type=""Appccelerate.StateMachine.Initialization"" method=""Reinitialization"" time=""0.0009249"" result=""Pass"" />
      <test name=""Appccelerate.StateMachine.Initialization.Reinitialization() [03] should throw an invalid operation exception"" type=""Appccelerate.StateMachine.Initialization"" method=""Reinitialization"" time=""0.0683551"" result=""Pass"" />
      <test name=""Appccelerate.StateMachine.Initialization.Start() [01] establish an initialized state machine"" type=""Appccelerate.StateMachine.Initialization"" method=""Start"" time=""0.000389"" result=""Pass"" />
      <test name=""Appccelerate.StateMachine.Initialization.Start() [02] when starting the state machine"" type=""Appccelerate.StateMachine.Initialization"" method=""Start"" time=""0.0004292"" result=""Pass"" />
      <test name=""Appccelerate.StateMachine.Initialization.Start() [03] should set current state of state machine to state to which it is initialized"" type=""Appccelerate.StateMachine.Initialization"" method=""Start"" time=""0.0002472"" result=""Pass"" />
      <test name=""Appccelerate.StateMachine.Initialization.Start() [04] should execute entry action of state to which state machine is initialized"" type=""Appccelerate.StateMachine.Initialization"" method=""Start"" time=""0.0002439"" result=""Pass"" />
      <test name=""Appccelerate.StateMachine.Initialization.StartingAnUninitializedStateMachine() [01] establish an uninitialized state machine"" type=""Appccelerate.StateMachine.Initialization"" method=""StartingAnUninitializedStateMachine"" time=""0.0001762"" result=""Pass"" />
      <test name=""Appccelerate.StateMachine.Initialization.StartingAnUninitializedStateMachine() [02] when starting the state machine"" type=""Appccelerate.StateMachine.Initialization"" method=""StartingAnUninitializedStateMachine"" time=""0.0002819"" result=""Pass"" />
      <test name=""Appccelerate.StateMachine.Initialization.StartingAnUninitializedStateMachine() [03] should throw an invalid operation exception"" type=""Appccelerate.StateMachine.Initialization"" method=""StartingAnUninitializedStateMachine"" time=""0.0003501"" result=""Pass"" />
      <test name=""Appccelerate.StateMachine.Initialization.InitializeALoadedStateMachine() [01] establish a loaded state machine"" type=""Appccelerate.StateMachine.Initialization"" method=""InitializeALoadedStateMachine"" time=""0.4562947"" result=""Pass"" />
      <test name=""Appccelerate.StateMachine.Initialization.InitializeALoadedStateMachine() [02] when initializing the state machine"" type=""Appccelerate.StateMachine.Initialization"" method=""InitializeALoadedStateMachine"" time=""0.0002113"" result=""Pass"" />
      <test name=""Appccelerate.StateMachine.Initialization.InitializeALoadedStateMachine() [03] should throw an invalid operation exception"" type=""Appccelerate.StateMachine.Initialization"" method=""InitializeALoadedStateMachine"" time=""0.0002103"" result=""Pass"" />
      <test name=""Appccelerate.StateMachine.Initialization.Initialize() [01] establish a state machine"" type=""Appccelerate.StateMachine.Initialization"" method=""Initialize"" time=""0.0001639"" result=""Pass"" />
      <test name=""Appccelerate.StateMachine.Initialization.Initialize() [02] when state machine is initialized"" type=""Appccelerate.StateMachine.Initialization"" method=""Initialize"" time=""0.0000621"" result=""Pass"" />
      <test name=""Appccelerate.StateMachine.Initialization.Initialize() [03] should not yet execute any entry actions"" type=""Appccelerate.StateMachine.Initialization"" method=""Initialize"" time=""0.0000857"" result=""Pass"" />
    </collection>
    <collection total=""9"" passed=""9"" failed=""0"" skipped=""0"" name=""Test collection for Appccelerate.StateMachine.Guards"" time=""0.134"">
      <test name=""Appccelerate.StateMachine.Guards.NoMatchingGuard() [01] establish state machine with no matching guard"" type=""Appccelerate.StateMachine.Guards"" method=""NoMatchingGuard"" time=""0.074281"" result=""Pass"" />
      <test name=""Appccelerate.StateMachine.Guards.NoMatchingGuard() [02] when an event is fired"" type=""Appccelerate.StateMachine.Guards"" method=""NoMatchingGuard"" time=""0.0106804"" result=""Pass"" />
      <test name=""Appccelerate.StateMachine.Guards.NoMatchingGuard() [03] it should notify about declined transition"" type=""Appccelerate.StateMachine.Guards"" method=""NoMatchingGuard"" time=""0.0295712"" result=""Pass"" />
      <test name=""Appccelerate.StateMachine.Guards.OtherwiseGuard() [01] establish a state machine with otherwise guard and no machting other guard"" type=""Appccelerate.StateMachine.Guards"" method=""OtherwiseGuard"" time=""0.0009544"" result=""Pass"" />
      <test name=""Appccelerate.StateMachine.Guards.OtherwiseGuard() [02] when an event is fired"" type=""Appccelerate.StateMachine.Guards"" method=""OtherwiseGuard"" time=""0.0003124"" result=""Pass"" />
      <test name=""Appccelerate.StateMachine.Guards.OtherwiseGuard() [03] it should take transition guarded with otherwise"" type=""Appccelerate.StateMachine.Guards"" method=""OtherwiseGuard"" time=""0.0002589"" result=""Pass"" />
      <test name=""Appccelerate.StateMachine.Guards.MatchingGuard() [01] establish a state machine with guarded transitions"" type=""Appccelerate.StateMachine.Guards"" method=""MatchingGuard"" time=""0.0010217"" result=""Pass"" />
      <test name=""Appccelerate.StateMachine.Guards.MatchingGuard() [02] when an event is fired"" type=""Appccelerate.StateMachine.Guards"" method=""MatchingGuard"" time=""0.000265"" result=""Pass"" />
      <test name=""Appccelerate.StateMachine.Guards.MatchingGuard() [03] it should take transition guarded with first matching guard"" type=""Appccelerate.StateMachine.Guards"" method=""MatchingGuard"" time=""0.0002094"" result=""Pass"" />
    </collection>
    <collection total=""4"" passed=""4"" failed=""0"" skipped=""0"" name=""Test collection for Appccelerate.StateMachine.Reporting"" time=""0.595"">
      <test name=""Appccelerate.StateMachine.Reporting.Report() [01] establish a state machine"" type=""Appccelerate.StateMachine.Reporting"" method=""Report"" time=""0.0459921"" result=""Pass"" />
      <test name=""Appccelerate.StateMachine.Reporting.Report() [02] establish a state machine reporter"" type=""Appccelerate.StateMachine.Reporting"" method=""Report"" time=""0.4407021"" result=""Pass"" />
      <test name=""Appccelerate.StateMachine.Reporting.Report() [03] when creating a report"" type=""Appccelerate.StateMachine.Reporting"" method=""Report"" time=""0.0133573"" result=""Pass"" />
      <test name=""Appccelerate.StateMachine.Reporting.Report() [04] it should call the passed reporter"" type=""Appccelerate.StateMachine.Reporting"" method=""Report"" time=""0.0870213"" result=""Pass"" />
    </collection>
    <collection total=""17"" passed=""17"" failed=""0"" skipped=""0"" name=""Test collection for Appccelerate.StateMachine.EntryActions"" time=""0.144"">
      <test name=""Appccelerate.StateMachine.EntryActions.EventArgument() [01] establish a state machine with an entry action taking an event argument"" type=""Appccelerate.StateMachine.EntryActions"" method=""EventArgument"" time=""0.0732543"" result=""Pass"" />
      <test name=""Appccelerate.StateMachine.EntryActions.EventArgument() [02] when entering the state"" type=""Appccelerate.StateMachine.EntryActions"" method=""EventArgument"" time=""0.0160698"" result=""Pass"" />
      <test name=""Appccelerate.StateMachine.EntryActions.EventArgument() [03] it should pass event argument to entry action"" type=""Appccelerate.StateMachine.EntryActions"" method=""EventArgument"" time=""0.0266298"" result=""Pass"" />
      <test name=""Appccelerate.StateMachine.EntryActions.MultipleEntryActions() [01] establish a state machine with several entry actions on a state"" type=""Appccelerate.StateMachine.EntryActions"" method=""MultipleEntryActions"" time=""0.0003601"" result=""Pass"" />
      <test name=""Appccelerate.StateMachine.EntryActions.MultipleEntryActions() [02] when entering the state"" type=""Appccelerate.StateMachine.EntryActions"" method=""MultipleEntryActions"" time=""0.0002363"" result=""Pass"" />
      <test name=""Appccelerate.StateMachine.EntryActions.MultipleEntryActions() [03] It should execute all entry actions"" type=""Appccelerate.StateMachine.EntryActions"" method=""MultipleEntryActions"" time=""0.0002526"" result=""Pass"" />
      <test name=""Appccelerate.StateMachine.EntryActions.EntryActionWithParameter() [01] establish a state machine with entry action with parameter on a state"" type=""Appccelerate.StateMachine.EntryActions"" method=""EntryActionWithParameter"" time=""0.0036304"" result=""Pass"" />
      <test name=""Appccelerate.StateMachine.EntryActions.EntryActionWithParameter() [02] when entering the state"" type=""Appccelerate.StateMachine.EntryActions"" method=""EntryActionWithParameter"" time=""0.0003812"" result=""Pass"" />
      <test name=""Appccelerate.StateMachine.EntryActions.EntryActionWithParameter() [03] it should execute the entry action"" type=""Appccelerate.StateMachine.EntryActions"" method=""EntryActionWithParameter"" time=""0.0001521"" result=""Pass"" />
      <test name=""Appccelerate.StateMachine.EntryActions.EntryActionWithParameter() [04] it should pass parameter to the entry action"" type=""Appccelerate.StateMachine.EntryActions"" method=""EntryActionWithParameter"" time=""0.0001871"" result=""Pass"" />
      <test name=""Appccelerate.StateMachine.EntryActions.EntryAction() [01] establish a state machine with entry action on a state"" type=""Appccelerate.StateMachine.EntryActions"" method=""EntryAction"" time=""0.0002463"" result=""Pass"" />
      <test name=""Appccelerate.StateMachine.EntryActions.EntryAction() [02] when entering the state"" type=""Appccelerate.StateMachine.EntryActions"" method=""EntryAction"" time=""0.0002716"" result=""Pass"" />
      <test name=""Appccelerate.StateMachine.EntryActions.EntryAction() [03] it should execute the entry action"" type=""Appccelerate.StateMachine.EntryActions"" method=""EntryAction"" time=""0.0001349"" result=""Pass"" />
      <test name=""Appccelerate.StateMachine.EntryActions.ExceptionHandling() [01] establish a state machine with several entry actions on a state and some of them throw an exception"" type=""Appccelerate.StateMachine.EntryActions"" method=""ExceptionHandling"" time=""0.0003109"" result=""Pass"" />
      <test name=""Appccelerate.StateMachine.EntryActions.ExceptionHandling() [02] when entering the state"" type=""Appccelerate.StateMachine.EntryActions"" method=""ExceptionHandling"" time=""0.0004627"" result=""Pass"" />
      <test name=""Appccelerate.StateMachine.EntryActions.ExceptionHandling() [03] it should execute all entry actions on entry"" type=""Appccelerate.StateMachine.EntryActions"" method=""ExceptionHandling"" time=""0.000233"" result=""Pass"" />
      <test name=""Appccelerate.StateMachine.EntryActions.ExceptionHandling() [04] it should handle all exceptions of all throwing entry actions by firing the TransitionExceptionThrown event"" type=""Appccelerate.StateMachine.EntryActions"" method=""ExceptionHandling"" time=""0.0095134"" result=""Pass"" />
    </collection>
    <collection total=""9"" passed=""9"" failed=""0"" skipped=""0"" name=""Test collection for Appccelerate.StateMachine.StartStop"" time=""0.005"">
      <test name=""Appccelerate.StateMachine.StartStop.Stopping() [01] (Background) establish initialized state machine"" type=""Appccelerate.StateMachine.StartStop"" method=""Stopping"" time=""0.0005605"" result=""Pass"" />
      <test name=""Appccelerate.StateMachine.StartStop.Stopping() [02] establish started state machine"" type=""Appccelerate.StateMachine.StartStop"" method=""Stopping"" time=""0.000166"" result=""Pass"" />
      <test name=""Appccelerate.StateMachine.StartStop.Stopping() [03] when stopping a state machine"" type=""Appccelerate.StateMachine.StartStop"" method=""Stopping"" time=""0.0003939"" result=""Pass"" />
      <test name=""Appccelerate.StateMachine.StartStop.Stopping() [04] when firing events onto the state machine"" type=""Appccelerate.StateMachine.StartStop"" method=""Stopping"" time=""0.0002472"" result=""Pass"" />
      <test name=""Appccelerate.StateMachine.StartStop.Stopping() [05] it should queue events"" type=""Appccelerate.StateMachine.StartStop"" method=""Stopping"" time=""0.0015259"" result=""Pass"" />
      <test name=""Appccelerate.StateMachine.StartStop.Starting() [01] (Background) establish initialized state machine"" type=""Appccelerate.StateMachine.StartStop"" method=""Starting"" time=""0.0000319"" result=""Pass"" />
      <test name=""Appccelerate.StateMachine.StartStop.Starting() [02] establish some queued events"" type=""Appccelerate.StateMachine.StartStop"" method=""Starting"" time=""0.0001216"" result=""Pass"" />
      <test name=""Appccelerate.StateMachine.StartStop.Starting() [03] when starting"" type=""Appccelerate.StateMachine.StartStop"" method=""Starting"" time=""0.0003522"" result=""Pass"" />
      <test name=""Appccelerate.StateMachine.StartStop.Starting() [04] it should execute queued events"" type=""Appccelerate.StateMachine.StartStop"" method=""Starting"" time=""0.000147"" result=""Pass"" />
    </collection>
    <collection total=""10"" passed=""10"" failed=""0"" skipped=""0"" name=""Test collection for Appccelerate.StateMachine.HierarchicalTransitions"" time=""0.018"">
      <test name=""Appccelerate.StateMachine.HierarchicalTransitions.NoCommonAncestor() [01] establish a hierarchical state machine"" type=""Appccelerate.StateMachine.HierarchicalTransitions"" method=""NoCommonAncestor"" time=""0.0061461"" result=""Pass"" />
      <test name=""Appccelerate.StateMachine.HierarchicalTransitions.NoCommonAncestor() [02] when firing an event resulting in a transition without a common ancestor"" type=""Appccelerate.StateMachine.HierarchicalTransitions"" method=""NoCommonAncestor"" time=""0.0010746"" result=""Pass"" />
      <test name=""Appccelerate.StateMachine.HierarchicalTransitions.NoCommonAncestor() [03] it should execute exit action of source state"" type=""Appccelerate.StateMachine.HierarchicalTransitions"" method=""NoCommonAncestor"" time=""0.0010073"" result=""Pass"" />
      <test name=""Appccelerate.StateMachine.HierarchicalTransitions.NoCommonAncestor() [04] it should execute exit action of parents of source state (recursively)"" type=""Appccelerate.StateMachine.HierarchicalTransitions"" method=""NoCommonAncestor"" time=""0.0002774"" result=""Pass"" />
      <test name=""Appccelerate.StateMachine.HierarchicalTransitions.NoCommonAncestor() [05] it should execute entry action of parents of destination state (recursively)"" type=""Appccelerate.StateMachine.HierarchicalTransitions"" method=""NoCommonAncestor"" time=""0.0002236"" result=""Pass"" />
      <test name=""Appccelerate.StateMachine.HierarchicalTransitions.NoCommonAncestor() [06] it should execute entry action of destination state"" type=""Appccelerate.StateMachine.HierarchicalTransitions"" method=""NoCommonAncestor"" time=""0.0001992"" result=""Pass"" />
      <test name=""Appccelerate.StateMachine.HierarchicalTransitions.NoCommonAncestor() [07] it should execute actions from source upwards and then downwards to destination state"" type=""Appccelerate.StateMachine.HierarchicalTransitions"" method=""NoCommonAncestor"" time=""0.0061953"" result=""Pass"" />
      <test name=""Appccelerate.StateMachine.HierarchicalTransitions.CommonAncestor() [01] establish a hierarchical state machine"" type=""Appccelerate.StateMachine.HierarchicalTransitions"" method=""CommonAncestor"" time=""0.000431"" result=""Pass"" />
      <test name=""Appccelerate.StateMachine.HierarchicalTransitions.CommonAncestor() [02] when firing an event resulting in a transition with a common ancestor"" type=""Appccelerate.StateMachine.HierarchicalTransitions"" method=""CommonAncestor"" time=""0.000105"" result=""Pass"" />
      <test name=""Appccelerate.StateMachine.HierarchicalTransitions.CommonAncestor() [03] the state machine should remain inside common ancestor state"" type=""Appccelerate.StateMachine.HierarchicalTransitions"" method=""CommonAncestor"" time=""0.0007027"" result=""Pass"" />
    </collection>
    <collection total=""6"" passed=""6"" failed=""0"" skipped=""0"" name=""Test collection for Appccelerate.StateMachine.StateMachineExtensions"" time=""0.410"">
      <test name=""Appccelerate.StateMachine.StateMachineExtensions.ClearingExtensions() [01] establish a state machine with an extension"" type=""Appccelerate.StateMachine.StateMachineExtensions"" method=""ClearingExtensions"" time=""0.3886347"" result=""Pass"" />
      <test name=""Appccelerate.StateMachine.StateMachineExtensions.ClearingExtensions() [02] when clearing all extensions from the state machine"" type=""Appccelerate.StateMachine.StateMachineExtensions"" method=""ClearingExtensions"" time=""0.000281"" result=""Pass"" />
      <test name=""Appccelerate.StateMachine.StateMachineExtensions.ClearingExtensions() [03] it should not anymore notify extension about internal events"" type=""Appccelerate.StateMachine.StateMachineExtensions"" method=""ClearingExtensions"" time=""0.0132725"" result=""Pass"" />
      <test name=""Appccelerate.StateMachine.StateMachineExtensions.AddingExtensions() [01] establish a state machine"" type=""Appccelerate.StateMachine.StateMachineExtensions"" method=""AddingExtensions"" time=""0.0002707"" result=""Pass"" />
      <test name=""Appccelerate.StateMachine.StateMachineExtensions.AddingExtensions() [02] when adding an extension"" type=""Appccelerate.StateMachine.StateMachineExtensions"" method=""AddingExtensions"" time=""0.0018558"" result=""Pass"" />
      <test name=""Appccelerate.StateMachine.StateMachineExtensions.AddingExtensions() [03] it should notify extension about internal events"" type=""Appccelerate.StateMachine.StateMachineExtensions"" method=""AddingExtensions"" time=""0.0036304"" result=""Pass"" />
    </collection>
    <collection total=""7"" passed=""7"" failed=""0"" skipped=""0"" name=""Test collection for Appccelerate.StateMachine.Transitions"" time=""0.128"">
      <test name=""Appccelerate.StateMachine.Transitions.ExecutingTransition() [01] establish a state machine with transitions"" type=""Appccelerate.StateMachine.Transitions"" method=""ExecutingTransition"" time=""0.0758721"" result=""Pass"" />
      <test name=""Appccelerate.StateMachine.Transitions.ExecutingTransition() [02] when firing an event onto the state machine"" type=""Appccelerate.StateMachine.Transitions"" method=""ExecutingTransition"" time=""0.0132673"" result=""Pass"" />
      <test name=""Appccelerate.StateMachine.Transitions.ExecutingTransition() [03] it should execute transition by switching state"" type=""Appccelerate.StateMachine.Transitions"" method=""ExecutingTransition"" time=""0.0262957"" result=""Pass"" />
      <test name=""Appccelerate.StateMachine.Transitions.ExecutingTransition() [04] it should execute transition actions"" type=""Appccelerate.StateMachine.Transitions"" method=""ExecutingTransition"" time=""0.000383"" result=""Pass"" />
      <test name=""Appccelerate.StateMachine.Transitions.ExecutingTransition() [05] it should pass parameters to transition action"" type=""Appccelerate.StateMachine.Transitions"" method=""ExecutingTransition"" time=""0.0041886"" result=""Pass"" />
      <test name=""Appccelerate.StateMachine.Transitions.ExecutingTransition() [06] it should execute exit action of source state"" type=""Appccelerate.StateMachine.Transitions"" method=""ExecutingTransition"" time=""0.0001823"" result=""Pass"" />
      <test name=""Appccelerate.StateMachine.Transitions.ExecutingTransition() [07] it should execute entry action of destination state"" type=""Appccelerate.StateMachine.Transitions"" method=""ExecutingTransition"" time=""0.0005958"" result=""Pass"" />
    </collection>
    <collection total=""3"" passed=""3"" failed=""0"" skipped=""0"" name=""Test collection for Appccelerate.StateMachine.CustomTypes"" time=""0.038"">
      <test name=""Appccelerate.StateMachine.CustomTypes.CustomTypesForStatesAndEvents() [01] establish a state machine with custom types for states and events"" type=""Appccelerate.StateMachine.CustomTypes"" method=""CustomTypesForStatesAndEvents"" time=""0.0256741"" result=""Pass"" />
      <test name=""Appccelerate.StateMachine.CustomTypes.CustomTypesForStatesAndEvents() [02] when using the state machine"" type=""Appccelerate.StateMachine.CustomTypes"" method=""CustomTypesForStatesAndEvents"" time=""0.0115422"" result=""Pass"" />
      <test name=""Appccelerate.StateMachine.CustomTypes.CustomTypesForStatesAndEvents() [03] it should use equals to compare states and events"" type=""Appccelerate.StateMachine.CustomTypes"" method=""CustomTypesForStatesAndEvents"" time=""0.0000884"" result=""Pass"" />
    </collection>
    <collection total=""17"" passed=""17"" failed=""0"" skipped=""0"" name=""Test collection for Appccelerate.StateMachine.ActiveStateMachines"" time=""0.468"">
      <test name=""Appccelerate.StateMachine.ActiveStateMachines.CustomStateMachineName() [01] establish an instantiated active state machine with custom name"" type=""Appccelerate.StateMachine.ActiveStateMachines"" method=""CustomStateMachineName"" time=""0.0006154"" result=""Pass"" />
      <test name=""Appccelerate.StateMachine.ActiveStateMachines.CustomStateMachineName() [02] establish a state machine reporter"" type=""Appccelerate.StateMachine.ActiveStateMachines"" method=""CustomStateMachineName"" time=""0.0000938"" result=""Pass"" />
      <test name=""Appccelerate.StateMachine.ActiveStateMachines.CustomStateMachineName() [03] when the state machine report is generated"" type=""Appccelerate.StateMachine.ActiveStateMachines"" method=""CustomStateMachineName"" time=""0.0002294"" result=""Pass"" />
      <test name=""Appccelerate.StateMachine.ActiveStateMachines.CustomStateMachineName() [04] it should use custom name for state machine"" type=""Appccelerate.StateMachine.ActiveStateMachines"" method=""CustomStateMachineName"" time=""0.0001678"" result=""Pass"" />
      <test name=""Appccelerate.StateMachine.ActiveStateMachines.PriorityEventsQueueing() [01] establish an active state machine with transitions"" type=""Appccelerate.StateMachine.ActiveStateMachines"" method=""PriorityEventsQueueing"" time=""0.0011863"" result=""Pass"" />
      <test name=""Appccelerate.StateMachine.ActiveStateMachines.PriorityEventsQueueing() [02] when firing a priority event onto the state machine"" type=""Appccelerate.StateMachine.ActiveStateMachines"" method=""PriorityEventsQueueing"" time=""0.0029274"" result=""Pass"" />
      <test name=""Appccelerate.StateMachine.ActiveStateMachines.PriorityEventsQueueing() [03] it should queue event at the front"" type=""Appccelerate.StateMachine.ActiveStateMachines"" method=""PriorityEventsQueueing"" time=""0.0009575"" result=""Pass"" />
      <test name=""Appccelerate.StateMachine.ActiveStateMachines.DefaultStateMachineName() [01] establish an instantiated active state machine"" type=""Appccelerate.StateMachine.ActiveStateMachines"" method=""DefaultStateMachineName"" time=""0.0001424"" result=""Pass"" />
      <test name=""Appccelerate.StateMachine.ActiveStateMachines.DefaultStateMachineName() [02] establish a state machine reporter"" type=""Appccelerate.StateMachine.ActiveStateMachines"" method=""DefaultStateMachineName"" time=""0.0000923"" result=""Pass"" />
      <test name=""Appccelerate.StateMachine.ActiveStateMachines.DefaultStateMachineName() [03] when the state machine report is generated"" type=""Appccelerate.StateMachine.ActiveStateMachines"" method=""DefaultStateMachineName"" time=""0.000092"" result=""Pass"" />
      <test name=""Appccelerate.StateMachine.ActiveStateMachines.DefaultStateMachineName() [04] it should use the type of the state machine as name for state machine"" type=""Appccelerate.StateMachine.ActiveStateMachines"" method=""DefaultStateMachineName"" time=""0.000163"" result=""Pass"" />
      <test name=""Appccelerate.StateMachine.ActiveStateMachines.EventsQueueing() [01] establish an active state machine with transitions"" type=""Appccelerate.StateMachine.ActiveStateMachines"" method=""EventsQueueing"" time=""0.0004585"" result=""Pass"" />
      <test name=""Appccelerate.StateMachine.ActiveStateMachines.EventsQueueing() [02] when firing an event onto the state machine"" type=""Appccelerate.StateMachine.ActiveStateMachines"" method=""EventsQueueing"" time=""0.0002973"" result=""Pass"" />
      <test name=""Appccelerate.StateMachine.ActiveStateMachines.EventsQueueing() [03] it should queue event at the end"" type=""Appccelerate.StateMachine.ActiveStateMachines"" method=""EventsQueueing"" time=""0.0002439"" result=""Pass"" />
      <test name=""Appccelerate.StateMachine.ActiveStateMachines.CustomFactory() [01] establish a custom factory"" type=""Appccelerate.StateMachine.ActiveStateMachines"" method=""CustomFactory"" time=""0.3729126"" result=""Pass"" />
      <test name=""Appccelerate.StateMachine.ActiveStateMachines.CustomFactory() [02] when creating an active state machine"" type=""Appccelerate.StateMachine.ActiveStateMachines"" method=""CustomFactory"" time=""0.0831231"" result=""Pass"" />
      <test name=""Appccelerate.StateMachine.ActiveStateMachines.CustomFactory() [03] it should use custom factory to create internal instances"" type=""Appccelerate.StateMachine.ActiveStateMachines"" method=""CustomFactory"" time=""0.0001131"" result=""Pass"" />
    </collection>
    <collection total=""7"" passed=""7"" failed=""0"" skipped=""0"" name=""Test collection for Appccelerate.StateMachine.Persisting"" time=""0.496"">
      <test name=""Appccelerate.StateMachine.Persisting.Loading() [01] establish a saved state machine with history"" type=""Appccelerate.StateMachine.Persisting"" method=""Loading"" time=""0.1155218"" result=""Pass"" />
      <test name=""Appccelerate.StateMachine.Persisting.Loading() [02] when state machine is loaded"" type=""Appccelerate.StateMachine.Persisting"" method=""Loading"" time=""0.0071079"" result=""Pass"" />
      <test name=""Appccelerate.StateMachine.Persisting.Loading() [03] it should reset current state"" type=""Appccelerate.StateMachine.Persisting"" method=""Loading"" time=""0.0012823"" result=""Pass"" />
      <test name=""Appccelerate.StateMachine.Persisting.Loading() [04] it should reset all history states of super states"" type=""Appccelerate.StateMachine.Persisting"" method=""Loading"" time=""0.0026198"" result=""Pass"" />
      <test name=""Appccelerate.StateMachine.Persisting.LoadingAnInitializedStateMachine() [01] establish an initialized state machine"" type=""Appccelerate.StateMachine.Persisting"" method=""LoadingAnInitializedStateMachine"" time=""0.0001753"" result=""Pass"" />
      <test name=""Appccelerate.StateMachine.Persisting.LoadingAnInitializedStateMachine() [02] when state machine is loaded"" type=""Appccelerate.StateMachine.Persisting"" method=""LoadingAnInitializedStateMachine"" time=""0.3581781"" result=""Pass"" />
      <test name=""Appccelerate.StateMachine.Persisting.LoadingAnInitializedStateMachine() [03] it should throw invalid operation exception"" type=""Appccelerate.StateMachine.Persisting"" method=""LoadingAnInitializedStateMachine"" time=""0.0019313"" result=""Pass"" />
    </collection>
    <collection total=""17"" passed=""17"" failed=""0"" skipped=""0"" name=""Test collection for Appccelerate.StateMachine.ExitActions"" time=""0.010"">
      <test name=""Appccelerate.StateMachine.ExitActions.MultipleExitActions() [01] establish a state machine with several exit actions on a state"" type=""Appccelerate.StateMachine.ExitActions"" method=""MultipleExitActions"" time=""0.0003857"" result=""Pass"" />
      <test name=""Appccelerate.StateMachine.ExitActions.MultipleExitActions() [02] when leaving the state"" type=""Appccelerate.StateMachine.ExitActions"" method=""MultipleExitActions"" time=""0.0003761"" result=""Pass"" />
      <test name=""Appccelerate.StateMachine.ExitActions.MultipleExitActions() [03] It should execute all exit actions"" type=""Appccelerate.StateMachine.ExitActions"" method=""MultipleExitActions"" time=""0.0002312"" result=""Pass"" />
      <test name=""Appccelerate.StateMachine.ExitActions.EventArgument() [01] establish a state machine with an exit action taking an event argument"" type=""Appccelerate.StateMachine.ExitActions"" method=""EventArgument"" time=""0.0007422"" result=""Pass"" />
      <test name=""Appccelerate.StateMachine.ExitActions.EventArgument() [02] when leaving the state"" type=""Appccelerate.StateMachine.ExitActions"" method=""EventArgument"" time=""0.000364"" result=""Pass"" />
      <test name=""Appccelerate.StateMachine.ExitActions.EventArgument() [03] it should pass event argument to exit action"" type=""Appccelerate.StateMachine.ExitActions"" method=""EventArgument"" time=""0.0002016"" result=""Pass"" />
      <test name=""Appccelerate.StateMachine.ExitActions.ExitActionWithParameter() [01] establish a state machine with exit action with parameter on a state"" type=""Appccelerate.StateMachine.ExitActions"" method=""ExitActionWithParameter"" time=""0.0006197"" result=""Pass"" />
      <test name=""Appccelerate.StateMachine.ExitActions.ExitActionWithParameter() [02] when leaving the state"" type=""Appccelerate.StateMachine.ExitActions"" method=""ExitActionWithParameter"" time=""0.0002608"" result=""Pass"" />
      <test name=""Appccelerate.StateMachine.ExitActions.ExitActionWithParameter() [03] it should execute the exit action"" type=""Appccelerate.StateMachine.ExitActions"" method=""ExitActionWithParameter"" time=""0.0001693"" result=""Pass"" />
      <test name=""Appccelerate.StateMachine.ExitActions.ExitActionWithParameter() [04] it should pass parameter to the exit action"" type=""Appccelerate.StateMachine.ExitActions"" method=""ExitActionWithParameter"" time=""0.000166"" result=""Pass"" />
      <test name=""Appccelerate.StateMachine.ExitActions.ExceptionHandling() [01] establish a state machine with several exit actions on a state and some of them throw an exception"" type=""Appccelerate.StateMachine.ExitActions"" method=""ExceptionHandling"" time=""0.0003085"" result=""Pass"" />
      <test name=""Appccelerate.StateMachine.ExitActions.ExceptionHandling() [02] when entering the state"" type=""Appccelerate.StateMachine.ExitActions"" method=""ExceptionHandling"" time=""0.0006674"" result=""Pass"" />
      <test name=""Appccelerate.StateMachine.ExitActions.ExceptionHandling() [03] it should execute all entry actions on entry"" type=""Appccelerate.StateMachine.ExitActions"" method=""ExceptionHandling"" time=""0.0002903"" result=""Pass"" />
      <test name=""Appccelerate.StateMachine.ExitActions.ExceptionHandling() [04] it should handle all exceptions of all throwing entry actions by firing the TransitionExceptionThrown event"" type=""Appccelerate.StateMachine.ExitActions"" method=""ExceptionHandling"" time=""0.0002197"" result=""Pass"" />
      <test name=""Appccelerate.StateMachine.ExitActions.ExitAction() [01] establish a state machine with exit action on a state"" type=""Appccelerate.StateMachine.ExitActions"" method=""ExitAction"" time=""0.0002381"" result=""Pass"" />
      <test name=""Appccelerate.StateMachine.ExitActions.ExitAction() [02] when leaving the state"" type=""Appccelerate.StateMachine.ExitActions"" method=""ExitAction"" time=""0.0001844"" result=""Pass"" />
      <test name=""Appccelerate.StateMachine.ExitActions.ExitAction() [03] it should execute the exit action"" type=""Appccelerate.StateMachine.ExitActions"" method=""ExitAction"" time=""0.0001168"" result=""Pass"" />
    </collection>
    <collection total=""17"" passed=""17"" failed=""0"" skipped=""0"" name=""Test collection for Appccelerate.StateMachine.PassiveStateMachines"" time=""0.609"">
      <test name=""Appccelerate.StateMachine.PassiveStateMachines.PriorityEventsQueueing() [01] establish a passive state machine with transitions"" type=""Appccelerate.StateMachine.PassiveStateMachines"" method=""PriorityEventsQueueing"" time=""0.0801899"" result=""Pass"" />
      <test name=""Appccelerate.StateMachine.PassiveStateMachines.PriorityEventsQueueing() [02] when firing a priority event onto the state machine"" type=""Appccelerate.StateMachine.PassiveStateMachines"" method=""PriorityEventsQueueing"" time=""0.0245871"" result=""Pass"" />
      <test name=""Appccelerate.StateMachine.PassiveStateMachines.PriorityEventsQueueing() [03] it should queue event at the front"" type=""Appccelerate.StateMachine.PassiveStateMachines"" method=""PriorityEventsQueueing"" time=""0.0111794"" result=""Pass"" />
      <test name=""Appccelerate.StateMachine.PassiveStateMachines.DefaultStateMachineName() [01] establish an instantiated passive state machine"" type=""Appccelerate.StateMachine.PassiveStateMachines"" method=""DefaultStateMachineName"" time=""0.0001445"" result=""Pass"" />
      <test name=""Appccelerate.StateMachine.PassiveStateMachines.DefaultStateMachineName() [02] establish a state machine reporter"" type=""Appccelerate.StateMachine.PassiveStateMachines"" method=""DefaultStateMachineName"" time=""0.0001482"" result=""Pass"" />
      <test name=""Appccelerate.StateMachine.PassiveStateMachines.DefaultStateMachineName() [03] when the state machine report is generated"" type=""Appccelerate.StateMachine.PassiveStateMachines"" method=""DefaultStateMachineName"" time=""0.0016406"" result=""Pass"" />
      <test name=""Appccelerate.StateMachine.PassiveStateMachines.DefaultStateMachineName() [04] it should use the type of the state machine as name for state machine"" type=""Appccelerate.StateMachine.PassiveStateMachines"" method=""DefaultStateMachineName"" time=""0.0004434"" result=""Pass"" />
      <test name=""Appccelerate.StateMachine.PassiveStateMachines.CustomStateMachineName() [01] establish an instantiated passive state machine with custom name"" type=""Appccelerate.StateMachine.PassiveStateMachines"" method=""CustomStateMachineName"" time=""0.0001663"" result=""Pass"" />
      <test name=""Appccelerate.StateMachine.PassiveStateMachines.CustomStateMachineName() [02] establish a state machine reporter"" type=""Appccelerate.StateMachine.PassiveStateMachines"" method=""CustomStateMachineName"" time=""0.000092"" result=""Pass"" />
      <test name=""Appccelerate.StateMachine.PassiveStateMachines.CustomStateMachineName() [03] when the state machine report is generated"" type=""Appccelerate.StateMachine.PassiveStateMachines"" method=""CustomStateMachineName"" time=""0.0001225"" result=""Pass"" />
      <test name=""Appccelerate.StateMachine.PassiveStateMachines.CustomStateMachineName() [04] it should use custom name for state machine"" type=""Appccelerate.StateMachine.PassiveStateMachines"" method=""CustomStateMachineName"" time=""0.0001814"" result=""Pass"" />
      <test name=""Appccelerate.StateMachine.PassiveStateMachines.CustomFactory() [01] establish a custom factory"" type=""Appccelerate.StateMachine.PassiveStateMachines"" method=""CustomFactory"" time=""0.4574059"" result=""Pass"" />
      <test name=""Appccelerate.StateMachine.PassiveStateMachines.CustomFactory() [02] when creating a passive state machine"" type=""Appccelerate.StateMachine.PassiveStateMachines"" method=""CustomFactory"" time=""0.0204088"" result=""Pass"" />
      <test name=""Appccelerate.StateMachine.PassiveStateMachines.CustomFactory() [03] it should use custom factory to create internal instances"" type=""Appccelerate.StateMachine.PassiveStateMachines"" method=""CustomFactory"" time=""0.0002873"" result=""Pass"" />
      <test name=""Appccelerate.StateMachine.PassiveStateMachines.EventsQueueing() [01] establish a passive state machine with transitions"" type=""Appccelerate.StateMachine.PassiveStateMachines"" method=""EventsQueueing"" time=""0.0002903"" result=""Pass"" />
      <test name=""Appccelerate.StateMachine.PassiveStateMachines.EventsQueueing() [02] when firing an event onto the state machine"" type=""Appccelerate.StateMachine.PassiveStateMachines"" method=""EventsQueueing"" time=""0.0001578"" result=""Pass"" />
      <test name=""Appccelerate.StateMachine.PassiveStateMachines.EventsQueueing() [03] it should queue event at the end"" type=""Appccelerate.StateMachine.PassiveStateMachines"" method=""EventsQueueing"" time=""0.0000884"" result=""Pass"" />
    </collection>
    <collection total=""35"" passed=""35"" failed=""0"" skipped=""0"" name=""Test collection for Appccelerate.StateMachine.ExceptionHandling"" time=""0.250"">
      <test name=""Appccelerate.StateMachine.ExceptionHandling.InitializationException() [01] establish a entry action for the initial state that throws an exception"" type=""Appccelerate.StateMachine.ExceptionHandling"" method=""InitializationException"" time=""0.000527"" result=""Pass"" />
      <test name=""Appccelerate.StateMachine.ExceptionHandling.InitializationException() [02] when initializing the state machine"" type=""Appccelerate.StateMachine.ExceptionHandling"" method=""InitializationException"" time=""0.0107211"" result=""Pass"" />
      <test name=""Appccelerate.StateMachine.ExceptionHandling.InitializationException() [03] should catch exception and fire transition exception event"" type=""Appccelerate.StateMachine.ExceptionHandling"" method=""InitializationException"" time=""0.040734"" result=""Pass"" />
      <test name=""Appccelerate.StateMachine.ExceptionHandling.InitializationException() [04] should pass thrown exception to event arguments of transition exception event"" type=""Appccelerate.StateMachine.ExceptionHandling"" method=""InitializationException"" time=""0.0009523"" result=""Pass"" />
      <test name=""Appccelerate.StateMachine.ExceptionHandling.NoExceptionHandlerRegistered() [01] establish an exception throwing state machine without a registered exception handler"" type=""Appccelerate.StateMachine.ExceptionHandling"" method=""NoExceptionHandlerRegistered"" time=""0.0009801"" result=""Pass"" />
      <test name=""Appccelerate.StateMachine.ExceptionHandling.NoExceptionHandlerRegistered() [02] when an exception occurs"" type=""Appccelerate.StateMachine.ExceptionHandling"" method=""NoExceptionHandlerRegistered"" time=""0.0033346"" result=""Pass"" />
      <test name=""Appccelerate.StateMachine.ExceptionHandling.NoExceptionHandlerRegistered() [03] should (re-)throw exception"" type=""Appccelerate.StateMachine.ExceptionHandling"" method=""NoExceptionHandlerRegistered"" time=""0.0001817"" result=""Pass"" />
      <test name=""Appccelerate.StateMachine.ExceptionHandling.ExitActionException() [01] establish an exit action throwing an exception"" type=""Appccelerate.StateMachine.ExceptionHandling"" method=""ExitActionException"" time=""0.0003338"" result=""Pass"" />
      <test name=""Appccelerate.StateMachine.ExceptionHandling.ExitActionException() [02] when executing the transition"" type=""Appccelerate.StateMachine.ExceptionHandling"" method=""ExitActionException"" time=""0.0008322"" result=""Pass"" />
      <test name=""Appccelerate.StateMachine.ExceptionHandling.ExitActionException() [03] should catch exception and fire transition exception event"" type=""Appccelerate.StateMachine.ExceptionHandling"" method=""ExitActionException"" time=""0.0002285"" result=""Pass"" />
      <test name=""Appccelerate.StateMachine.ExceptionHandling.ExitActionException() [04] should pass source state of failing transition to event arguments of transition exception event"" type=""Appccelerate.StateMachine.ExceptionHandling"" method=""ExitActionException"" time=""0.0003767"" result=""Pass"" />
      <test name=""Appccelerate.StateMachine.ExceptionHandling.ExitActionException() [05] should pass event id causing transition to event arguments of transition exception event"" type=""Appccelerate.StateMachine.ExceptionHandling"" method=""ExitActionException"" time=""0.0002858"" result=""Pass"" />
      <test name=""Appccelerate.StateMachine.ExceptionHandling.ExitActionException() [06] should pass thrown exception to event arguments of transition exception event"" type=""Appccelerate.StateMachine.ExceptionHandling"" method=""ExitActionException"" time=""0.0001391"" result=""Pass"" />
      <test name=""Appccelerate.StateMachine.ExceptionHandling.ExitActionException() [07] should pass event parameter to event argument of transition exception event"" type=""Appccelerate.StateMachine.ExceptionHandling"" method=""ExitActionException"" time=""0.0002369"" result=""Pass"" />
      <test name=""Appccelerate.StateMachine.ExceptionHandling.TransitionActionException() [01] establish a transition action throwing an exception"" type=""Appccelerate.StateMachine.ExceptionHandling"" method=""TransitionActionException"" time=""0.0004358"" result=""Pass"" />
      <test name=""Appccelerate.StateMachine.ExceptionHandling.TransitionActionException() [02] when executing the transition"" type=""Appccelerate.StateMachine.ExceptionHandling"" method=""TransitionActionException"" time=""0.0002976"" result=""Pass"" />
      <test name=""Appccelerate.StateMachine.ExceptionHandling.TransitionActionException() [03] should catch exception and fire transition exception event"" type=""Appccelerate.StateMachine.ExceptionHandling"" method=""TransitionActionException"" time=""0.0000042"" result=""Pass"" />
      <test name=""Appccelerate.StateMachine.ExceptionHandling.TransitionActionException() [04] should pass source state of failing transition to event arguments of transition exception event"" type=""Appccelerate.StateMachine.ExceptionHandling"" method=""TransitionActionException"" time=""0.0000054"" result=""Pass"" />
      <test name=""Appccelerate.StateMachine.ExceptionHandling.TransitionActionException() [05] should pass event id causing transition to event arguments of transition exception event"" type=""Appccelerate.StateMachine.ExceptionHandling"" method=""TransitionActionException"" time=""0.0000045"" result=""Pass"" />
      <test name=""Appccelerate.StateMachine.ExceptionHandling.TransitionActionException() [06] should pass thrown exception to event arguments of transition exception event"" type=""Appccelerate.StateMachine.ExceptionHandling"" method=""TransitionActionException"" time=""0.0000027"" result=""Pass"" />
      <test name=""Appccelerate.StateMachine.ExceptionHandling.TransitionActionException() [07] should pass event parameter to event argument of transition exception event"" type=""Appccelerate.StateMachine.ExceptionHandling"" method=""TransitionActionException"" time=""0.0000039"" result=""Pass"" />
      <test name=""Appccelerate.StateMachine.ExceptionHandling.EntryActionException() [01] establish an entry action throwing an exception"" type=""Appccelerate.StateMachine.ExceptionHandling"" method=""EntryActionException"" time=""0.0003423"" result=""Pass"" />
      <test name=""Appccelerate.StateMachine.ExceptionHandling.EntryActionException() [02] when executing the transition"" type=""Appccelerate.StateMachine.ExceptionHandling"" method=""EntryActionException"" time=""0.0003248"" result=""Pass"" />
      <test name=""Appccelerate.StateMachine.ExceptionHandling.EntryActionException() [03] should catch exception and fire transition exception event"" type=""Appccelerate.StateMachine.ExceptionHandling"" method=""EntryActionException"" time=""0.000003"" result=""Pass"" />
      <test name=""Appccelerate.StateMachine.ExceptionHandling.EntryActionException() [04] should pass source state of failing transition to event arguments of transition exception event"" type=""Appccelerate.StateMachine.ExceptionHandling"" method=""EntryActionException"" time=""0.0000027"" result=""Pass"" />
      <test name=""Appccelerate.StateMachine.ExceptionHandling.EntryActionException() [05] should pass event id causing transition to event arguments of transition exception event"" type=""Appccelerate.StateMachine.ExceptionHandling"" method=""EntryActionException"" time=""0.0000024"" result=""Pass"" />
      <test name=""Appccelerate.StateMachine.ExceptionHandling.EntryActionException() [06] should pass thrown exception to event arguments of transition exception event"" type=""Appccelerate.StateMachine.ExceptionHandling"" method=""EntryActionException"" time=""0.0000018"" result=""Pass"" />
      <test name=""Appccelerate.StateMachine.ExceptionHandling.EntryActionException() [07] should pass event parameter to event argument of transition exception event"" type=""Appccelerate.StateMachine.ExceptionHandling"" method=""EntryActionException"" time=""0.0000024"" result=""Pass"" />
      <test name=""Appccelerate.StateMachine.ExceptionHandling.GuardException() [01] establish a guard throwing an exception"" type=""Appccelerate.StateMachine.ExceptionHandling"" method=""GuardException"" time=""0.0003148"" result=""Pass"" />
      <test name=""Appccelerate.StateMachine.ExceptionHandling.GuardException() [02] when executing the transition"" type=""Appccelerate.StateMachine.ExceptionHandling"" method=""GuardException"" time=""0.0004177"" result=""Pass"" />
      <test name=""Appccelerate.StateMachine.ExceptionHandling.GuardException() [03] should catch exception and fire transition exception event"" type=""Appccelerate.StateMachine.ExceptionHandling"" method=""GuardException"" time=""0.0000027"" result=""Pass"" />
      <test name=""Appccelerate.StateMachine.ExceptionHandling.GuardException() [04] should pass source state of failing transition to event arguments of transition exception event"" type=""Appccelerate.StateMachine.ExceptionHandling"" method=""GuardException"" time=""0.0000027"" result=""Pass"" />
      <test name=""Appccelerate.StateMachine.ExceptionHandling.GuardException() [05] should pass event id causing transition to event arguments of transition exception event"" type=""Appccelerate.StateMachine.ExceptionHandling"" method=""GuardException"" time=""0.0000024"" result=""Pass"" />
      <test name=""Appccelerate.StateMachine.ExceptionHandling.GuardException() [06] should pass thrown exception to event arguments of transition exception event"" type=""Appccelerate.StateMachine.ExceptionHandling"" method=""GuardException"" time=""0.0000027"" result=""Pass"" />
      <test name=""Appccelerate.StateMachine.ExceptionHandling.GuardException() [07] should pass event parameter to event argument of transition exception event"" type=""Appccelerate.StateMachine.ExceptionHandling"" method=""GuardException"" time=""0.0000045"" result=""Pass"" />
    </collection>
  </assembly>
</assemblies>");
    }
}